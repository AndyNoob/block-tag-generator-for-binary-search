import java.util.stream.Stream

plugins {
    id 'java'
    id 'me.kcra.takenaka.accessor' version '1.1.4'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'comfortable_andy'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = "https://repo.screamingsandals.org/public"
    }
}

dependencies {
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'commons-cli:commons-cli:1.8.0'
    implementation 'org.jsoup:jsoup:1.17.2'
    mappingBundle("me.kcra.takenaka:mappings:1.8.8+1.21")
    implementation("me.kcra.takenaka:generator-accessor-runtime:${me.kcra.takenaka.gradle.BuildConfig.BUILD_VERSION}")
}

accessors {
    basePackage("comfortable_andy.ray_trace_gen.accessors")
    // this is the base package of the generated output, probably somewhere in your plugin/library's namespace
    accessedNamespaces("source", "spigot", "mojang")
    versions("1.21")
    // these are the "namespaces" that can be queried on runtime, i.e. "spigot" (for Spigot/CraftBukkit/Paper), "searge" (for Forge), "mojang" (for Mojang-mapped Paper - >1.20.4), "yarn" (not useful on runtime) or "intermediary" (for Fabric)
    accessorType("reflection")
    // this is the generated accessor type, can be "none" (no accessor breakout classes are generated, only a mapping class that can be queried), "reflection" or "method_handles" (self-explanatory, java.lang.reflect or java.lang.invoke accessors)
    mapClass("net.minecraft.world.level.block.Block") {
        method(boolean.class, "isShapeFullBlock", "net.minecraft.world.phys.shapes.VoxelShape")
    }
    mapClass("net.minecraft.world.level.block.state.BlockBehaviour") {
        method("net.minecraft.world.phys.shapes.VoxelShape", "getCollisionShape", "net.minecraft.world.level.block.state.BlockState", "net.minecraft.world.level.BlockGetter", "net.minecraft.core.BlockPos", "net.minecraft.world.phys.shapes.CollisionContext")
    }
    mapClass("net.minecraft.world.level.EmptyBlockGetter") {
        field("net.minecraft.world.level.EmptyBlockGetter", "INSTANCE")
    }
    mapClass("net.minecraft.core.BlockPos") {
        field("net.minecraft.core.BlockPos", "ZERO")
    }
    mapClass("net.minecraft.world.phys.shapes.CollisionContext") {
        method("net.minecraft.world.phys.shapes.CollisionContext", "empty")
    }
    mapClass("net.minecraft.core.registries.BuiltInRegistries") {
        field("net.minecraft.core.DefaultedRegistry", "BLOCK")
    }
}

jar {
    manifest {
        attributes('Main-Class': 'comfortable_andy.ray_trace_gen.RayTraceGenMain')
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    archiveClassifier.set("")
}